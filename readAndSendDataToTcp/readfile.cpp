#include "readfile.h"
#include <QThread>
#include <QDebug>

readFile::readFile(QObject *parent)
    :QObject(parent)
{
    //qDebug()<<"readFile:"<<QThread::currentThreadId()<<endl;
}

void readFile::getFileData(QString filename)
{
    //qDebug()<<"readFile: getFileData()"<<QThread::currentThreadId()<<endl;
    string Filename = filename.toLocal8Bit().data();
    if(Filename.find(".txt")==string::npos&&Filename.find(".mca")==string::npos&&Filename.find(".MCA")==string::npos)
        //判断文件名类型
        return;

    ifstream ifs;
    ifs.open(Filename, ios::in);
    if(!ifs.is_open())
        return;

    bool isData =false;
    bool isNum = false;

    spectum.index = 0;
    while (!ifs.eof())
    {
        string inbuf;
        getline(ifs, inbuf, '\n');
        isNum = isDigitStr(inbuf);
        if(inbuf=="<<DATA>>")
            isData = true;
        if(inbuf=="<<END>>")
            isData = false;
        if(!isNum)//读取其他参数
        {
            int pos = inbuf.find('-',0);
            if(pos&&inbuf.substr(0,pos-1)=="GAIN")
            {
                    int m_Gain = stoi(inbuf.substr(pos+2,inbuf.size()-pos-2));
                    spectum.size = (short)(512 * pow(2,m_Gain-1));
            }
        }

        if(isData&&isNum)//读取data
        {
            spectum.channel[spectum.index] = (uint32_t)(stoul(inbuf));
            spectum.index++;
        }
    }
    ifs.close();//关闭文件
    this->setProtocol();
    this->setCheckSum();
    emit readStop(&dData);
}

void readFile::setProtocol()
{
    //qDebug()<<"readFile: setProtocol()"<<QThread::currentThreadId()<<endl;
    dData.size = spectum.size * 3 + 8;
    dData.data[0] = 0xF5;
    dData.data[1] = 0xFA;

    switch (spectum.size)
    {
    case 256:
        dData.data[2] = 0x81;
        dData.data[3] = 0x01;
        break;
    case 512:
        dData.data[2] = 0x81;
        dData.data[3] = 0x03;
        break;
    case 1024:
        dData.data[2] = 0x81;
        dData.data[3] = 0x05;
        break;
    case 2048:
        dData.data[2] = 0x81;
        dData.data[3] = 0x07;
        break;
    case 4096:
        dData.data[2] = 0x81;
        dData.data[3] = 0x09;
        break;
    default:
        dData.data[2] = 0x81;
        dData.data[3] = 0x0B;
    }
    dData.data[4] = (spectum.size * 3)/256;
    dData.data[5] = (spectum.size * 3)%256;

    for(int i = 6,j = 0; i < dData.size - 2 ; i = i + 3,j++)
    {
        dData.data[i] = spectum.channel[j]%256;
        dData.data[i+1] = spectum.channel[j]/256;
        dData.data[i+2] = spectum.channel[j]/(256*256);
    }




}

void readFile::setCheckSum()
{
    unsigned short CRC = CRC16_CCITT_TABLE(dData.data, dData.size-2);
    dData.data[dData.size-2] = CRC>>8;
    dData.data[dData.size-1] = (CRC&0x00FF);
}

bool readFile::isDigitStr(string src)//判断字符串是不是数字
{
   // QByteArray ba = src.toLatin1();//QString 转换为 char*
    for (int i =0;i < (int)src.size();i++)
    {
        if((src.at(i)!='.'&&src.at(i)!=' ')&&(src.at(i)<'0'||src.at(i)>'9'))
                return false;

    }
    return true;

}

unsigned short readFile::CRC16_CCITT_TABLE(unsigned char *puchMsg, unsigned short usDataLen)
{
    unsigned char CRC_CCITT_Left[] =
    {
            0x0,0x11,0x23,0x32,0x46,0x57,0x65,0x74,
            0x8c,0x9d,0xaf,0xbe,0xca,0xdb,0xe9,0xf8,
            0x10,0x1,0x33,0x22,0x56,0x47,0x75,0x64,
            0x9c,0x8d,0xbf,0xae,0xda,0xcb,0xf9,0xe8,
            0x21,0x30,0x2,0x13,0x67,0x76,0x44,0x55,
            0xad,0xbc,0x8e,0x9f,0xeb,0xfa,0xc8,0xd9,
            0x31,0x20,0x12,0x3,0x77,0x66,0x54,0x45,
            0xbd,0xac,0x9e,0x8f,0xfb,0xea,0xd8,0xc9,
            0x42,0x53,0x61,0x70,0x4,0x15,0x27,0x36,
            0xce,0xdf,0xed,0xfc,0x88,0x99,0xab,0xba,
            0x52,0x43,0x71,0x60,0x14,0x5,0x37,0x26,
            0xde,0xcf,0xfd,0xec,0x98,0x89,0xbb,0xaa,
            0x63,0x72,0x40,0x51,0x25,0x34,0x6,0x17,
            0xef,0xfe,0xcc,0xdd,0xa9,0xb8,0x8a,0x9b,
            0x73,0x62,0x50,0x41,0x35,0x24,0x16,0x7,
            0xff,0xee,0xdc,0xcd,0xb9,0xa8,0x9a,0x8b,
            0x84,0x95,0xa7,0xb6,0xc2,0xd3,0xe1,0xf0,
            0x8,0x19,0x2b,0x3a,0x4e,0x5f,0x6d,0x7c,
            0x94,0x85,0xb7,0xa6,0xd2,0xc3,0xf1,0xe0,
            0x18,0x9,0x3b,0x2a,0x5e,0x4f,0x7d,0x6c,
            0xa5,0xb4,0x86,0x97,0xe3,0xf2,0xc0,0xd1,
            0x29,0x38,0xa,0x1b,0x6f,0x7e,0x4c,0x5d,
            0xb5,0xa4,0x96,0x87,0xf3,0xe2,0xd0,0xc1,
            0x39,0x28,0x1a,0xb,0x7f,0x6e,0x5c,0x4d,
            0xc6,0xd7,0xe5,0xf4,0x80,0x91,0xa3,0xb2,
            0x4a,0x5b,0x69,0x78,0xc,0x1d,0x2f,0x3e,
            0xd6,0xc7,0xf5,0xe4,0x90,0x81,0xb3,0xa2,
            0x5a,0x4b,0x79,0x68,0x1c,0xd,0x3f,0x2e,
            0xe7,0xf6,0xc4,0xd5,0xa1,0xb0,0x82,0x93,
            0x6b,0x7a,0x48,0x59,0x2d,0x3c,0xe,0x1f,
            0xf7,0xe6,0xd4,0xc5,0xb1,0xa0,0x92,0x83,
            0x7b,0x6a,0x58,0x49,0x3d,0x2c,0x1e,0xf

    };

    unsigned char CRC_CCITT_Right[] =
    {
        0x00,0x89,0x12,0x9b,0x24,0xad,0x36,0xbf,
        0x48,0xc1,0x5a,0xd3,0x6c,0xe5,0x7e,0xf7,
        0x81,0x8,0x93,0x1a,0xa5,0x2c,0xb7,0x3e,
        0xc9,0x40,0xdb,0x52,0xed,0x64,0xff,0x76,
        0x2,0x8b,0x10,0x99,0x26,0xaf,0x34,0xbd,
        0x4a,0xc3,0x58,0xd1,0x6e,0xe7,0x7c,0xf5,
        0x83,0xa,0x91,0x18,0xa7,0x2e,0xb5,0x3c,
        0xcb,0x42,0xd9,0x50,0xef,0x66,0xfd,0x74,
        0x4,0x8d,0x16,0x9f,0x20,0xa9,0x32,0xbb,
        0x4c,0xc5,0x5e,0xd7,0x68,0xe1,0x7a,0xf3,
        0x85,0xc,0x97,0x1e,0xa1,0x28,0xb3,0x3a,
        0xcd,0x44,0xdf,0x56,0xe9,0x60,0xfb,0x72,
        0x6,0x8f,0x14,0x9d,0x22,0xab,0x30,0xb9,
        0x4e,0xc7,0x5c,0xd5,0x6a,0xe3,0x78,0xf1,
        0x87,0xe,0x95,0x1c,0xa3,0x2a,0xb1,0x38,
        0xcf,0x46,0xdd,0x54,0xeb,0x62,0xf9,0x70,
        0x8,0x81,0x1a,0x93,0x2c,0xa5,0x3e,0xb7,
        0x40,0xc9,0x52,0xdb,0x64,0xed,0x76,0xff,
        0x89,0x0,0x9b,0x12,0xad,0x24,0xbf,0x36,
        0xc1,0x48,0xd3,0x5a,0xe5,0x6c,0xf7,0x7e,
        0xa,0x83,0x18,0x91,0x2e,0xa7,0x3c,0xb5,
        0x42,0xcb,0x50,0xd9,0x66,0xef,0x74,0xfd,
        0x8b,0x2,0x99,0x10,0xaf,0x26,0xbd,0x34,
        0xc3,0x4a,0xd1,0x58,0xe7,0x6e,0xf5,0x7c,
        0xc,0x85,0x1e,0x97,0x28,0xa1,0x3a,0xb3,
        0x44,0xcd,0x56,0xdf,0x60,0xe9,0x72,0xfb,
        0x8d,0x4,0x9f,0x16,0xa9,0x20,0xbb,0x32,
        0xc5,0x4c,0xd7,0x5e,0xe1,0x68,0xf3,0x7a,
        0xe,0x87,0x1c,0x95,0x2a,0xa3,0x38,0xb1,
        0x46,0xcf,0x54,0xdd,0x62,0xeb,0x70,0xf9,
        0x8f,0x6,0x9d,0x14,0xab,0x22,0xb9,0x30,
        0xc7,0x4e,0xd5,0x5c,0xe3,0x6a,0xf1,0x78
    };

    unsigned short uIndex = 0;
    unsigned char wCRCLo = 0x00;
    unsigned char wCRCHi = 0x00;
    while (usDataLen--)
    {
        uIndex = wCRCLo^(*puchMsg++);
        wCRCLo = wCRCHi ^ CRC_CCITT_Right[uIndex];
        wCRCHi = CRC_CCITT_Left[uIndex];
    }
        return (wCRCHi << 8) ^ wCRCLo;

}
